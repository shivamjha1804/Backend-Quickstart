{{#docker}}version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: {{name}}-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      {{#postgresql}}- DB_HOST=postgres{{/postgresql}}
      {{#mysql}}- DB_HOST=mysql{{/mysql}}
      {{#mongodb}}- DB_HOST=mongodb{{/mongodb}}
      {{#redis}}- REDIS_HOST=redis{{/redis}}
    env_file:
      - .env
    volumes:
      - ./logs:/usr/src/app/logs
      - ./uploads:/usr/src/app/uploads
    depends_on:
      {{#postgresql}}- postgres{{/postgresql}}
      {{#mysql}}- mysql{{/mysql}}
      {{#mongodb}}- mongodb{{/mongodb}}
      {{#redis}}- redis{{/redis}}
    networks:
      - {{name}}-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  {{#postgresql}}postgres:
    image: postgres:15-alpine
    container_name: {{name}}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-{{name}}_development}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - {{name}}-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3{{/postgresql}}

  {{#mysql}}mysql:
    image: mysql:8.0
    container_name: {{name}}-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_DATABASE: ${DB_NAME:-{{name}}_development}
      MYSQL_USER: ${DB_USERNAME:-mysql}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - {{name}}-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3{{/mysql}}

  {{#mongodb}}mongodb:
    image: mongo:7
    container_name: {{name}}-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME:-}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD:-}
      MONGO_INITDB_DATABASE: ${DB_NAME:-{{name}}_development}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - {{name}}-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3{{/mongodb}}

  {{#redis}}redis:
    image: redis:7-alpine
    container_name: {{name}}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{name}}-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3{{/redis}}

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: {{name}}-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - {{name}}-network

volumes:
  {{#postgresql}}postgres_data:{{/postgresql}}
  {{#mysql}}mysql_data:{{/mysql}}
  {{#mongodb}}mongodb_data:{{/mongodb}}
  {{#redis}}redis_data:{{/redis}}

networks:
  {{name}}-network:
    driver: bridge{{/docker}}