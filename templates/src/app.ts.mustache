{{#typescript}}import express from 'express';{{/typescript}}{{^typescript}}const express = require('express');{{/typescript}}
{{#typescript}}import helmet from 'helmet';{{/typescript}}{{^typescript}}const helmet = require('helmet');{{/typescript}}
{{#typescript}}import cors from 'cors';{{/typescript}}{{^typescript}}const cors = require('cors');{{/typescript}}
{{#typescript}}import compression from 'compression';{{/typescript}}{{^typescript}}const compression = require('compression');{{/typescript}}
{{#typescript}}import morgan from 'morgan';{{/typescript}}{{^typescript}}const morgan = require('morgan');{{/typescript}}
{{#rateLimit}}{{#typescript}}import rateLimit from 'express-rate-limit';{{/typescript}}{{^typescript}}const rateLimit = require('express-rate-limit');{{/typescript}}{{/rateLimit}}
{{#typescript}}import { config } from './config';{{/typescript}}{{^typescript}}const { config } = require('./config');{{/typescript}}
{{#typescript}}import { logger } from './core/utils/logger';{{/typescript}}{{^typescript}}const { logger } = require('./core/utils/logger');{{/typescript}}
{{#typescript}}import { errorHandler } from './shared/middlewares/errorHandler';{{/typescript}}{{^typescript}}const { errorHandler } = require('./shared/middlewares/errorHandler');{{/typescript}}
{{#typescript}}import { notFoundHandler } from './shared/middlewares/notFoundHandler';{{/typescript}}{{^typescript}}const { notFoundHandler } = require('./shared/middlewares/notFoundHandler');{{/typescript}}

// Import routes
{{#typescript}}import authRoutes from './api/v1/routes/auth';{{/typescript}}{{^typescript}}const authRoutes = require('./api/v1/routes/auth');{{/typescript}}
{{#typescript}}import userRoutes from './api/v1/routes/users';{{/typescript}}{{^typescript}}const userRoutes = require('./api/v1/routes/users');{{/typescript}}

{{#swagger}}{{#typescript}}import swaggerJsDoc from 'swagger-jsdoc';{{/typescript}}{{^typescript}}const swaggerJsDoc = require('swagger-jsdoc');{{/typescript}}
{{#typescript}}import swaggerUi from 'swagger-ui-express';{{/typescript}}{{^typescript}}const swaggerUi = require('swagger-ui-express');{{/typescript}}{{/swagger}}

const app = express();

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
  hsts: {
    maxAge: 31536000,
    includeSubDomains: true,
    preload: true
  }
}));

{{#cors}}// CORS configuration
app.use(cors({
  origin: config.cors.origin,
  credentials: config.cors.credentials,
  optionsSuccessStatus: 200
}));{{/cors}}

// Rate limiting
{{#rateLimit}}const limiter = rateLimit({
  windowMs: config.security.rateLimitWindow,
  max: config.security.rateLimitMax,
  message: {
    error: 'Too many requests from this IP, please try again later.',
    statusCode: 429
  },
  standardHeaders: true,
  legacyHeaders: false,
});
app.use(limiter);{{/rateLimit}}

// Body parsing middleware
app.use(express.json({ limit: config.server.bodyParserLimit }));
app.use(express.urlencoded({ extended: true, limit: config.server.bodyParserLimit }));

// Compression
app.use(compression());

// Logging
if (config.server.env !== 'test') {
  app.use(morgan(config.server.env === 'production' ? 'combined' : 'dev', {
    stream: { write: (message) => logger.info(message.trim()) }
  }));
}

{{#swagger}}// Swagger documentation
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: '{{name}} API',
      version: '{{version}}',
      description: '{{description}}',
    },
    servers: [
      {
        url: `http://localhost:${config.server.port}`,
        description: 'Development server',
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
      },
    },
  },
  apis: ['./src/api/v1/routes/*.{{#typescript}}ts{{/typescript}}{{^typescript}}js{{/typescript}}'],
};

const swaggerSpec = swaggerJsDoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));{{/swagger}}

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: config.server.env,
    version: '{{version}}'
  });
});

// API routes
app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/users', userRoutes);

// 404 handler
app.use(notFoundHandler);

// Error handling middleware
app.use(errorHandler);

{{#typescript}}export default app;{{/typescript}}{{^typescript}}module.exports = app;{{/typescript}}