{{#typescript}}
import { Request, Response, NextFunction } from 'express';
import Joi from 'joi';
{{/typescript}}

{{^typescript}}
const { Request, Response, NextFunction } = require('express');
const Joi = require('joi');
{{/typescript}}

/**
 * Validation middleware factory
 */
{{#typescript}}
const validateRequest = (schema: Joi.ObjectSchema) => {
  return (req: Request, res: Response, next: NextFunction): void => {
{{/typescript}}

{{^typescript}}
const validateRequest = (schema) => {
  return (req, res, next) => {
{{/typescript}}
    const { error } = schema.validate(req.body, {
      abortEarly: false,
      allowUnknown: false,
      stripUnknown: true
    });

    if (error) {
      const errors = error.details.map(detail => ({
        field: detail.path.join('.'),
        message: detail.message.replace(/"/g, '')
      }));

      return res.status(400).json({
        success: false,
        error: {
          message: 'Validation failed',
          statusCode: 400,
          details: errors
        }
      });
    }

    next();
  };
};

/**
 * Update profile validation schema
 */
const updateProfileSchema = Joi.object({
  firstName: Joi.string()
    .trim()
    .min(1)
    .max(50)
    .optional()
    .messages({
      'string.min': 'First name cannot be empty',
      'string.max': 'First name cannot exceed 50 characters'
    }),
  
  lastName: Joi.string()
    .trim()
    .min(1)
    .max(50)
    .optional()
    .messages({
      'string.min': 'Last name cannot be empty',
      'string.max': 'Last name cannot exceed 50 characters'
    }),
  
  email: Joi.string()
    .email()
    .optional()
    .messages({
      'string.email': 'Please provide a valid email address'
    })
}).min(1).messages({
  'object.min': 'At least one field must be provided for update'
});

/**
 * Admin update user validation schema
 */
const adminUpdateUserSchema = Joi.object({
  firstName: Joi.string()
    .trim()
    .min(1)
    .max(50)
    .optional()
    .messages({
      'string.min': 'First name cannot be empty',
      'string.max': 'First name cannot exceed 50 characters'
    }),
  
  lastName: Joi.string()
    .trim()
    .min(1)
    .max(50)
    .optional()
    .messages({
      'string.min': 'Last name cannot be empty',
      'string.max': 'Last name cannot exceed 50 characters'
    }),
  
  email: Joi.string()
    .email()
    .optional()
    .messages({
      'string.email': 'Please provide a valid email address'
    }),
  
  isActive: Joi.boolean()
    .optional()
    .messages({
      'boolean.base': 'isActive must be a boolean value'
    }),
  
  role: Joi.string()
    .valid('user', 'admin', 'moderator')
    .optional()
    .messages({
      'any.only': 'Role must be one of: user, admin, moderator'
    })
}).min(1).messages({
  'object.min': 'At least one field must be provided for update'
});

/**
 * Query validation for user listing
 */
{{#typescript}}
const validateUserQuery = (req: Request, res: Response, next: NextFunction): void => {
{{/typescript}}

{{^typescript}}
const validateUserQuery = (req, res, next) => {
{{/typescript}}
  const schema = Joi.object({
    page: Joi.number()
      .integer()
      .min(1)
      .default(1)
      .messages({
        'number.base': 'Page must be a number',
        'number.integer': 'Page must be an integer',
        'number.min': 'Page must be at least 1'
      }),
    
    limit: Joi.number()
      .integer()
      .min(1)
      .max(100)
      .default(10)
      .messages({
        'number.base': 'Limit must be a number',
        'number.integer': 'Limit must be an integer',
        'number.min': 'Limit must be at least 1',
        'number.max': 'Limit cannot exceed 100'
      }),
    
    search: Joi.string()
      .trim()
      .max(100)
      .optional()
      .allow('')
      .messages({
        'string.max': 'Search term cannot exceed 100 characters'
      }),
    
    sortBy: Joi.string()
      .valid('createdAt', 'updatedAt', 'firstName', 'lastName', 'email')
      .default('createdAt')
      .messages({
        'any.only': 'sortBy must be one of: createdAt, updatedAt, firstName, lastName, email'
      }),
    
    sortOrder: Joi.string()
      .valid('asc', 'desc')
      .default('desc')
      .messages({
        'any.only': 'sortOrder must be either asc or desc'
      }),
    
    role: Joi.string()
      .valid('user', 'admin', 'moderator')
      .optional()
      .messages({
        'any.only': 'Role filter must be one of: user, admin, moderator'
      }),
    
    isActive: Joi.boolean()
      .optional()
      .messages({
        'boolean.base': 'isActive filter must be a boolean value'
      })
  });

  const { error, value } = schema.validate(req.query, {
    abortEarly: false,
    allowUnknown: false,
    stripUnknown: true
  });

  if (error) {
    const errors = error.details.map(detail => ({
      field: detail.path.join('.'),
      message: detail.message.replace(/"/g, '')
    }));

    return res.status(400).json({
      success: false,
      error: {
        message: 'Invalid query parameters',
        statusCode: 400,
        details: errors
      }
    });
  }

  // Set validated query parameters
  req.query = value;
  next();
};

/**
 * User ID parameter validation
 */
{{#typescript}}
const validateUserId = (req: Request, res: Response, next: NextFunction): void => {
{{/typescript}}

{{^typescript}}
const validateUserId = (req, res, next) => {
{{/typescript}}
  const schema = Joi.object({
    id: Joi.string()
      .required()
      {{#mongodb}}.length(24)
      .hex(){{/mongodb}}
      .messages({
        'any.required': 'User ID is required',
        {{#mongodb}}'string.length': 'User ID must be a valid MongoDB ObjectId',
        'string.hex': 'User ID must be a valid MongoDB ObjectId'{{/mongodb}}
        {{^mongodb}}'string.base': 'User ID must be a valid UUID'{{/mongodb}}
      })
  });

  const { error } = schema.validate(req.params);

  if (error) {
    return res.status(400).json({
      success: false,
      error: {
        message: 'Invalid user ID',
        statusCode: 400,
        details: error.details.map(detail => ({
          field: detail.path.join('.'),
          message: detail.message.replace(/"/g, '')
        }))
      }
    });
  }

  next();
};

// Export validation middlewares
{{#typescript}}
export const validateUpdateProfile = validateRequest(updateProfileSchema);
export const validateAdminUpdateUser = validateRequest(adminUpdateUserSchema);
export { validateUserQuery, validateUserId };
{{/typescript}}

{{^typescript}}
module.exports = {
  validateUpdateProfile: validateRequest(updateProfileSchema),
  validateAdminUpdateUser: validateRequest(adminUpdateUserSchema),
  validateUserQuery,
  validateUserId
};
{{/typescript}}