{{#mongodb}}{{#typescript}}import mongoose from 'mongoose';{{/typescript}}{{^typescript}}const mongoose = require('mongoose');{{/typescript}}
{{#typescript}}import { config } from '../../config';{{/typescript}}{{^typescript}}const { config } = require('../../config');{{/typescript}}
{{#typescript}}import { logger } from '../utils/logger';{{/typescript}}{{^typescript}}const { logger } = require('../utils/logger');{{/typescript}}

{{#typescript}}export async function connectMongoDB(): Promise<void> {{{/typescript}}{{^typescript}}async function connectMongoDB() {{{/typescript}}
  try {
    // Build MongoDB URI with authentication if provided
    let mongoUri;
    if (process.env.DB_USERNAME && process.env.DB_PASSWORD) {
      mongoUri = `mongodb://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@${config.database.host}:${config.database.port}/${config.database.name}?authSource=admin`;
    } else {
      mongoUri = `mongodb://${config.database.host}:${config.database.port}/${config.database.name}`;
    }
    
    const options = {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      family: 4, // Use IPv4, skip trying IPv6
      retryWrites: true,
      retryReads: true,
    };

    await mongoose.connect(mongoUri, options);
    
    logger.info('MongoDB connected successfully');
    
    // Handle connection events
    mongoose.connection.on('error', (error) => {
      logger.error('MongoDB connection error:', error);
    });
    
    mongoose.connection.on('disconnected', () => {
      logger.warn('MongoDB disconnected');
    });
    
    mongoose.connection.on('reconnected', () => {
      logger.info('MongoDB reconnected');
    });
    
  } catch (error) {
    logger.error('Failed to connect to MongoDB:', error);
    throw error;
  }
}

{{#typescript}}export async function closeMongoDB(): Promise<void> {{{/typescript}}{{^typescript}}async function closeMongoDB() {{{/typescript}}
  try {
    await mongoose.connection.close();
    logger.info('MongoDB connection closed');
  } catch (error) {
    logger.error('Error closing MongoDB connection:', error);
    throw error;
  }
}

{{#typescript}}export { mongoose };{{/typescript}}{{^typescript}}module.exports = {
  connectMongoDB,
  closeMongoDB,
  mongoose
};{{/typescript}}{{/mongodb}}