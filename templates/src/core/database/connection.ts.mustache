{{^mongodb}}{{#typescript}}import { Sequelize } from 'sequelize';{{/typescript}}{{^typescript}}const { Sequelize } = require('sequelize');{{/typescript}}
{{#typescript}}import { config } from '../../config';{{/typescript}}{{^typescript}}const { config } = require('../../config');{{/typescript}}
{{#typescript}}import { logger } from '../utils/logger';{{/typescript}}{{^typescript}}const { logger } = require('../utils/logger');{{/typescript}}

{{#typescript}}let sequelize: Sequelize;{{/typescript}}{{^typescript}}let sequelize;{{/typescript}}

{{#typescript}}export async function connectDB(): Promise<void> {{{/typescript}}{{^typescript}}async function connectDB() {{{/typescript}}
  try {
    {{#sqlite}}// SQLite configuration
    sequelize = new Sequelize({
      dialect: 'sqlite',
      storage: process.env.DB_PATH || './database.sqlite',
      logging: config.database.logging ? (msg) => logger.info(msg) : false,
      pool: config.database.pool
    });{{/sqlite}}

    {{#postgresql}}// PostgreSQL configuration
    sequelize = new Sequelize(
      config.database.name,
      config.database.username,
      config.database.password,
      {
        host: config.database.host,
        port: config.database.port,
        dialect: 'postgres',
        logging: config.database.logging ? (msg) => logger.info(msg) : false,
        pool: config.database.pool,
        define: {
          timestamps: true,
          underscored: true,
          paranoid: true
        }
      }
    );{{/postgresql}}

    {{#mysql}}// MySQL configuration
    sequelize = new Sequelize(
      config.database.name,
      config.database.username,
      config.database.password,
      {
        host: config.database.host,
        port: config.database.port,
        dialect: 'mysql',
        logging: config.database.logging ? (msg) => logger.info(msg) : false,
        pool: config.database.pool,
        define: {
          timestamps: true,
          underscored: true,
          paranoid: true
        }
      }
    );{{/mysql}}

    // Test the connection
    await sequelize.authenticate();
    logger.info('Database connection established successfully');

    // Sync models in development
    if (config.server.env === 'development') {
      await sequelize.sync({ alter: true });
      logger.info('Database models synchronized');
    }

  } catch (error) {
    logger.error('Unable to connect to the database:', error);
    throw error;
  }
}

{{#typescript}}export async function closeDB(): Promise<void> {{{/typescript}}{{^typescript}}async function closeDB() {{{/typescript}}
  try {
    if (sequelize) {
      await sequelize.close();
      logger.info('Database connection closed');
    }
  } catch (error) {
    logger.error('Error closing database connection:', error);
    throw error;
  }
}

{{#typescript}}export { sequelize };{{/typescript}}{{^typescript}}module.exports = {
  connectDB,
  closeDB,
  sequelize
};{{/typescript}}{{/mongodb}}