{{#mongodb}}
{{#typescript}}
import mongoose, { Document, Schema } from 'mongoose';
{{#authentication}}
import bcrypt from 'bcryptjs';
{{/authentication}}
import { config } from '../../../config';
{{/typescript}}

{{^typescript}}
const mongoose = require('mongoose');
{{#authentication}}
const bcrypt = require('bcryptjs');
{{/authentication}}
const { config } = require('../../../config');
{{/typescript}}

{{#typescript}}export interface IUser extends Document {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  isActive: boolean;
  isEmailVerified: boolean;
  lastLoginAt?: Date;
  emailVerificationToken?: string;
  passwordResetToken?: string;
  passwordResetExpiresAt?: Date;
  createdAt: Date;
  updatedAt: Date;
  
  // Instance methods
  comparePassword(candidatePassword: string): Promise<boolean>;
  fullName: string;
}{{/typescript}}

const UserSchema{{#typescript}}: Schema<IUser>{{/typescript}} = new Schema({
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    lowercase: true,
    trim: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please provide a valid email']
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [8, 'Password must be at least 8 characters long'],
    select: false // Don't include password in queries by default
  },
  firstName: {
    type: String,
    required: [true, 'First name is required'],
    trim: true,
    maxlength: [50, 'First name cannot exceed 50 characters']
  },
  lastName: {
    type: String,
    required: [true, 'Last name is required'],
    trim: true,
    maxlength: [50, 'Last name cannot exceed 50 characters']
  },
  isActive: {
    type: Boolean,
    default: true
  },
  isEmailVerified: {
    type: Boolean,
    default: false
  },
  lastLoginAt: {
    type: Date
  },
  emailVerificationToken: {
    type: String,
    select: false
  },
  passwordResetToken: {
    type: String,
    select: false
  },
  passwordResetExpiresAt: {
    type: Date,
    select: false
  }
}, {
  timestamps: true,
  toJSON: {
    transform: function(doc, ret) {
      delete ret.password;
      delete ret.emailVerificationToken;
      delete ret.passwordResetToken;
      delete ret.passwordResetExpiresAt;
      delete ret.__v;
      return ret;
    }
  }
});

// Indexes for performance
UserSchema.index({ email: 1 });
UserSchema.index({ isActive: 1 });
UserSchema.index({ isEmailVerified: 1 });
UserSchema.index({ createdAt: -1 });
UserSchema.index({ emailVerificationToken: 1 });
UserSchema.index({ passwordResetToken: 1 });

{{#authentication}}// Hash password before saving
UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  this.password = await bcrypt.hash(this.password, config.security.bcryptRounds);
  next();
});

// Instance method to compare password
UserSchema.methods.comparePassword = async function(candidatePassword{{#typescript}}: string{{/typescript}}){{#typescript}}: Promise<boolean>{{/typescript}} {
  return bcrypt.compare(candidatePassword, this.password);
};{{/authentication}}

// Virtual for full name
UserSchema.virtual('fullName').get(function() {
  return `${this.firstName} ${this.lastName}`;
});

// Ensure virtual fields are serialized
UserSchema.set('toJSON', { virtuals: true });

{{#typescript}}
const User = mongoose.model<IUser>('User', UserSchema);

export default User;
{{/typescript}}

{{^typescript}}
const User = mongoose.model('User', UserSchema);

module.exports = User;
{{/typescript}}
{{/mongodb}}