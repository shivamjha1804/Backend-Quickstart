{{^mongodb}}{{#typescript}}import { DataTypes, Model, Optional } from 'sequelize';{{/typescript}}{{^typescript}}const { DataTypes, Model } = require('sequelize');{{/typescript}}
{{#typescript}}import bcrypt from 'bcryptjs';{{/typescript}}{{^typescript}}const bcrypt = require('bcryptjs');{{/typescript}}
{{#typescript}}import { sequelize } from '../connection';{{/typescript}}{{^typescript}}const { sequelize } = require('../connection');{{/typescript}}
{{#typescript}}import { config } from '../../../config';{{/typescript}}{{^typescript}}const { config } = require('../../../config');{{/typescript}}

{{#typescript}}interface UserAttributes {
  id: string;
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  role: string;
  isActive: boolean;
  isEmailVerified: boolean;
  lastLoginAt?: Date;
  emailVerificationToken?: string;
  passwordResetToken?: string;
  passwordResetExpiresAt?: Date;
  createdAt: Date;
  updatedAt: Date;
  deletedAt?: Date;
}

interface UserCreationAttributes extends Optional<UserAttributes, 'id' | 'role' | 'isActive' | 'isEmailVerified' | 'createdAt' | 'updatedAt'> {}

export class User extends Model<UserAttributes, UserCreationAttributes> implements UserAttributes {
  public id!: string;
  public email!: string;
  public password!: string;
  public firstName!: string;
  public lastName!: string;
  public role!: string;
  public isActive!: boolean;
  public isEmailVerified!: boolean;
  public lastLoginAt?: Date;
  public emailVerificationToken?: string;
  public passwordResetToken?: string;
  public passwordResetExpiresAt?: Date;
  public createdAt!: Date;
  public updatedAt!: Date;
  public deletedAt?: Date;

  // Instance method
  public async comparePassword(candidatePassword: string): Promise<boolean> {
    return bcrypt.compare(candidatePassword, this.password);
  }

  // Virtual getter
  public get fullName(): string {
    return `${this.firstName} ${this.lastName}`;
  }
}{{/typescript}}

{{#typescript}}User.init({{/typescript}}{{^typescript}}const User = sequelize.define('User',{{/typescript}} {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: {
      name: 'users_email_unique',
      msg: 'Email address is already in use'
    },
    validate: {
      isEmail: {
        msg: 'Please provide a valid email address'
      },
      len: {
        args: [5, 255],
        msg: 'Email must be between 5 and 255 characters'
      }
    }
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
    validate: {
      len: {
        args: [8, 128],
        msg: 'Password must be between 8 and 128 characters'
      }
    }
  },
  firstName: {
    type: DataTypes.STRING,
    allowNull: false,
    field: 'first_name',
    validate: {
      len: {
        args: [1, 50],
        msg: 'First name must be between 1 and 50 characters'
      }
    }
  },
  lastName: {
    type: DataTypes.STRING,
    allowNull: false,
    field: 'last_name',
    validate: {
      len: {
        args: [1, 50],
        msg: 'Last name must be between 1 and 50 characters'
      }
    }
  },
  role: {
    type: DataTypes.ENUM('user', 'admin', 'moderator'),
    defaultValue: 'user',
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true,
    allowNull: false,
    field: 'is_active'
  },
  isEmailVerified: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    allowNull: false,
    field: 'is_email_verified'
  },
  lastLoginAt: {
    type: DataTypes.DATE,
    allowNull: true,
    field: 'last_login_at'
  },
  emailVerificationToken: {
    type: DataTypes.STRING,
    allowNull: true,
    field: 'email_verification_token'
  },
  passwordResetToken: {
    type: DataTypes.STRING,
    allowNull: true,
    field: 'password_reset_token'
  },
  passwordResetExpiresAt: {
    type: DataTypes.DATE,
    allowNull: true,
    field: 'password_reset_expires_at'
  },
  createdAt: {
    type: DataTypes.DATE,
    allowNull: false,
    field: 'created_at'
  },
  updatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    field: 'updated_at'
  },
  deletedAt: {
    type: DataTypes.DATE,
    allowNull: true,
    field: 'deleted_at'
  }
}{{#typescript}}, {
  sequelize,
  modelName: 'User',
  tableName: 'users',
  timestamps: true,
  paranoid: true,
  underscored: true,
  indexes: [
    {
      unique: true,
      fields: ['email']
    },
    {
      fields: ['is_active']
    },
    {
      fields: ['is_email_verified']
    },
    {
      fields: ['created_at']
    },
    {
      fields: ['email_verification_token']
    },
    {
      fields: ['password_reset_token']
    }
  ]
});{{/typescript}}{{^typescript}}, {
  tableName: 'users',
  timestamps: true,
  paranoid: true,
  underscored: true,
  indexes: [
    {
      unique: true,
      fields: ['email']
    },
    {
      fields: ['is_active']
    },
    {
      fields: ['is_email_verified']
    },
    {
      fields: ['created_at']
    },
    {
      fields: ['email_verification_token']
    },
    {
      fields: ['password_reset_token']
    }
  ]
});{{/typescript}}

// Hash password before saving
{{#typescript}}User.beforeCreate(async (user: User) => {
  if (user.password) {
    user.password = await bcrypt.hash(user.password, config.security.bcryptRounds);
  }
});

User.beforeUpdate(async (user: User) => {
  if (user.changed('password')) {
    user.password = await bcrypt.hash(user.password, config.security.bcryptRounds);
  }
});{{/typescript}}{{^typescript}}User.beforeCreate(async (user) => {
  if (user.password) {
    user.password = await bcrypt.hash(user.password, config.security.bcryptRounds);
  }
});

User.beforeUpdate(async (user) => {
  if (user.changed('password')) {
    user.password = await bcrypt.hash(user.password, config.security.bcryptRounds);
  }
});{{/typescript}}

{{^typescript}}// Add instance methods
User.prototype.comparePassword = async function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

// Add virtual for full name
User.prototype.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};{{/typescript}}

// Remove sensitive fields from JSON output
{{#typescript}}User.prototype.toJSON = function() {
  const values = { ...this.get() };
  delete values.password;
  delete values.emailVerificationToken;
  delete values.passwordResetToken;
  delete values.passwordResetExpiresAt;
  return values;
};{{/typescript}}{{^typescript}}User.prototype.toJSON = function() {
  const values = { ...this.dataValues };
  delete values.password;
  delete values.emailVerificationToken;
  delete values.passwordResetToken;
  delete values.passwordResetExpiresAt;
  return values;
};{{/typescript}}

{{^typescript}}module.exports = { User };{{/typescript}}{{/mongodb}}