import { Request, Response } from 'express';
import { AuthService } from '../services/AuthService';
import { ApiResponse } from '../../../core/utils/apiResponse';
import { ApiError } from '../../../core/errors/ApiError';
import { logger } from '../../../core/utils/logger';

export class AuthController {
  private authService: AuthService;

  constructor() {
    this.authService = new AuthService();
  }

  async register(req: Request, res: Response): Promise<void> {
    const { email, password, firstName, lastName } = req.body;

    const existingUser = await this.authService.findUserByEmail(email);
    if (existingUser) {
      throw new ApiError(409, 'User with this email already exists');
    }

    const result = await this.authService.register({
      email,
      password,
      firstName,
      lastName
    });

    logger.info(`New user registered: ${email}`);
    ApiResponse.created(res, result, 'User registered successfully');
  }

  async login(req: Request, res: Response): Promise<void> {
    const { email, password } = req.body;

    const result = await this.authService.login(email, password);
    if (!result) {
      throw new ApiError(401, 'Invalid email or password');
    }

    logger.info(`User logged in: ${email}`);
    ApiResponse.success(res, result, 'Login successful');
  }

  async refresh(req: Request, res: Response): Promise<void> {
    const { refreshToken } = req.body;

    const result = await this.authService.refreshToken(refreshToken);
    if (!result) {
      throw new ApiError(401, 'Invalid refresh token');
    }

    ApiResponse.success(res, result, 'Token refreshed successfully');
  }

  async logout(req: Request, res: Response): Promise<void> {
    const userId = (req as any).user.id;
    await this.authService.logout(userId);

    logger.info(`User logged out: ${userId}`);
    ApiResponse.success(res, null, 'Logout successful');
  }

  async forgotPassword(req: Request, res: Response): Promise<void> {
    const { email } = req.body;

    const success = await this.authService.forgotPassword(email);
    if (!success) {
      throw new ApiError(404, 'User with this email does not exist');
    }

    ApiResponse.success(res, null, 'Password reset email sent');
  }

  async resetPassword(req: Request, res: Response): Promise<void> {
    const { token, newPassword } = req.body;

    const success = await this.authService.resetPassword(token, newPassword);
    if (!success) {
      throw new ApiError(400, 'Invalid or expired reset token');
    }

    ApiResponse.success(res, null, 'Password reset successful');
  }

  async verifyEmail(req: Request, res: Response): Promise<void> {
    const { token } = req.body;

    const success = await this.authService.verifyEmail(token);
    if (!success) {
      throw new ApiError(400, 'Invalid verification token');
    }

    ApiResponse.success(res, null, 'Email verified successfully');
  }

  async resendVerification(req: Request, res: Response): Promise<void> {
    const userId = (req as any).user.id;

    const success = await this.authService.resendVerification(userId);
    if (!success) {
      throw new ApiError(400, 'Email is already verified');
    }

    ApiResponse.success(res, null, 'Verification email sent');
  }

  async getCurrentUser(req: Request, res: Response): Promise<void> {
    const userId = (req as any).user.id;
    const user = await this.authService.getUserById(userId);

    if (!user) {
      throw new ApiError(404, 'User not found');
    }

    ApiResponse.success(res, user, 'Current user retrieved successfully');
  }
}