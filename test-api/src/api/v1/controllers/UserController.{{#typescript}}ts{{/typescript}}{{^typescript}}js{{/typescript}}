import { Request, Response } from 'express';
import { UserService } from '../services/UserService';
import { ApiResponse } from '../../../core/utils/apiResponse';
import { ApiError } from '../../../core/errors/ApiError';
import { logger } from '../../../core/utils/logger';

export class UserController {
  private userService: UserService;

  constructor() {
    this.userService = new UserService();
  }

  async getUsers(req: Request, res: Response): Promise<void> {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    const search = req.query.search as string;
    const isActive = req.query.isActive === 'true' ? true : 
                     req.query.isActive === 'false' ? false : undefined;
    const isEmailVerified = req.query.isEmailVerified === 'true' ? true : 
                           req.query.isEmailVerified === 'false' ? false : undefined;

    const filters = {
      search,
      isActive,
      isEmailVerified
    };

    const result = await this.userService.getAllUsers(filters, page, limit);

    ApiResponse.success(res, result.data, 'Users retrieved successfully', {
      pagination: result.pagination
    });
  }

  async getUserById(req: Request, res: Response): Promise<void> {
    const { id } = req.params;
    const user = await this.userService.getUserById(parseInt(id));

    if (!user) {
      throw new ApiError(404, 'User not found');
    }

    ApiResponse.success(res, user, 'User retrieved successfully');
  }

  async createUser(req: Request, res: Response): Promise<void> {
    const userData = req.body;
    
    const existingUser = await this.userService.getUserByEmail(userData.email);
    if (existingUser) {
      throw new ApiError(409, 'User with this email already exists');
    }

    const user = await this.userService.createUser(userData);

    logger.info(`User created: ${user.email}`);
    ApiResponse.created(res, user, 'User created successfully');
  }

  async updateUser(req: Request, res: Response): Promise<void> {
    const { id } = req.params;
    const updateData = req.body;

    const existingUser = await this.userService.getUserById(parseInt(id));
    if (!existingUser) {
      throw new ApiError(404, 'User not found');
    }

    // Check if email is being updated and if it's already taken
    if (updateData.email && updateData.email !== existingUser.email) {
      const emailUser = await this.userService.getUserByEmail(updateData.email);
      if (emailUser) {
        throw new ApiError(409, 'Email already taken by another user');
      }
    }

    const updatedUser = await this.userService.updateUser(parseInt(id), updateData);

    logger.info(`User updated: ${updatedUser.email}`);
    ApiResponse.success(res, updatedUser, 'User updated successfully');
  }

  async deleteUser(req: Request, res: Response): Promise<void> {
    const { id } = req.params;

    const existingUser = await this.userService.getUserById(parseInt(id));
    if (!existingUser) {
      throw new ApiError(404, 'User not found');
    }

    await this.userService.deleteUser(parseInt(id));

    logger.info(`User deleted: ${existingUser.email}`);
    ApiResponse.success(res, null, 'User deleted successfully');
  }

  async getCurrentUser(req: Request, res: Response): Promise<void> {
    const userId = (req as any).user.id;
    const user = await this.userService.getUserById(userId);

    if (!user) {
      throw new ApiError(404, 'User not found');
    }

    ApiResponse.success(res, user, 'Current user retrieved successfully');
  }

  async updateCurrentUser(req: Request, res: Response): Promise<void> {
    const userId = (req as any).user.id;
    const updateData = req.body;

    // Remove sensitive fields that shouldn't be updated via this endpoint
    delete updateData.password;
    delete updateData.isActive;
    delete updateData.isEmailVerified;

    const existingUser = await this.userService.getUserById(userId);
    if (!existingUser) {
      throw new ApiError(404, 'User not found');
    }

    // Check if email is being updated and if it's already taken
    if (updateData.email && updateData.email !== existingUser.email) {
      const emailUser = await this.userService.getUserByEmail(updateData.email);
      if (emailUser) {
        throw new ApiError(409, 'Email already taken');
      }
    }

    const updatedUser = await this.userService.updateUser(userId, updateData);

    logger.info(`User profile updated: ${updatedUser.email}`);
    ApiResponse.success(res, updatedUser, 'Profile updated successfully');
  }

  async changePassword(req: Request, res: Response): Promise<void> {
    const userId = (req as any).user.id;
    const { currentPassword, newPassword } = req.body;

    const success = await this.userService.changePassword(
      userId, 
      currentPassword, 
      newPassword
    );

    if (!success) {
      throw new ApiError(400, 'Current password is incorrect');
    }

    logger.info(`Password changed for user ID: ${userId}`);
    ApiResponse.success(res, null, 'Password changed successfully');
  }
}